#!/usr/bin/env python3
"""
Manual YAML Fix for Problematic Files
Fixes specific known issues in the updates-and-patching directory
"""

import os
import re
from pathlib import Path

class ManualYAMLFix:
    def __init__(self, root_dir):
        self.root_dir = Path(root_dir)
        self.fixed_files = 0
        
    def fix_rhel_register_rhn(self, file_path):
        """Fix the problematic rhel_register_rhn.yml file"""
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Fix the major structural issues
        fixed_content = content
        
        # Find and fix the report generation task that's malformed
        report_pattern = r'(- name: Generate registration report.*?)(\n\s*---)'
        match = re.search(report_pattern, fixed_content, re.DOTALL)
        
        if match:
            # Remove the extra --- that's breaking the YAML
            before_task = fixed_content[:match.start()]
            task_content = match.group(1)
            after_task = fixed_content[match.end():]
            
            # Fix the content block in the task
            task_content = re.sub(r'content: \|([^"]+?dest:)', lambda m: 
                f'content: |\n          {m.group(1).strip()}\n          \n          ---\n          Report generated by Ansible RHN Registration Playbook v2.0.0\n        dest:', task_content, flags=re.DOTALL)
            
            fixed_content = before_task + task_content + after_task
            
            # Remove any stray --- that aren't document separators
            lines = fixed_content.split('\n')
            cleaned_lines = []
            in_content_block = False
            
            for i, line in enumerate(lines):
                if 'content: |' in line:
                    in_content_block = True
                elif in_content_block and (line.strip().startswith('dest:') or line.strip().startswith('mode:')):
                    in_content_block = False
                
                if in_content_block:
                    cleaned_lines.append(line)
                elif line.strip() == '---' and i > 0:
                    # Only keep document start at beginning
                    continue
                else:
                    cleaned_lines.append(line)
            
            fixed_content = '\n'.join(cleaned_lines)
        
        return fixed_content
    
    def fix_simple_playbook_structure(self, content):
        """Fix simple playbook structure issues"""
        lines = content.split('\n')
        fixed_lines = []
        
        i = 0
        while i < len(lines):
            line = lines[i]
            stripped = line.strip()
            
            # Skip empty lines
            if not stripped:
                fixed_lines.append('')
                i += 1
                continue
            
            # Document start
            if stripped == '---':
                fixed_lines.append('---')
                i += 1
                continue
            
            # Play definition issues
            if re.match(r'^-\s*name:', stripped):
                fixed_lines.append(stripped)
                i += 1
                continue
            elif re.match(r'^-\s*hosts:', stripped):
                fixed_lines.append(stripped)
                i += 1
                continue
            elif stripped.startswith('- ') and ('name:' in stripped or 'hosts:' in stripped):
                fixed_lines.append(stripped)
                i += 1
                continue
            
            # Fix standalone attributes that should be indented
            if ':' in stripped and not stripped.startswith('-') and not line.startswith(' '):
                # This should be a play-level attribute
                if any(attr in stripped for attr in ['hosts:', 'gather_facts:', 'vars:', 'tasks:', 'become:']):
                    fixed_lines.append('  ' + stripped)
                else:
                    fixed_lines.append(stripped)
            else:
                fixed_lines.append(line)
            
            i += 1
        
        return '\n'.join(fixed_lines)
    
    def run(self):
        """Run manual fixes on problematic files"""
        print("Manual YAML Fix - Starting...")
        
        # Fix specific problematic files
        problem_files = [
            'rhel_register_rhn.yml',
            'security_update.yml',
            'simple_patching.yml',
            'check_vulner.yml',
            'kpatch_rhel.yml'
        ]
        
        for filename in problem_files:
            file_path = self.root_dir / filename
            if file_path.exists():
                print(f"Fixing: {file_path}")
                
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    if filename == 'rhel_register_rhn.yml':
                        fixed_content = self.fix_rhel_register_rhn(file_path)
                    else:
                        fixed_content = self.fix_simple_playbook_structure(content)
                    
                    if fixed_content != content:
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(fixed_content)
                        print(f"  ✓ Fixed {filename}")
                        self.fixed_files += 1
                    else:
                        print(f"  ✓ No changes needed for {filename}")
                        
                except Exception as e:
                    print(f"  ✗ Error fixing {filename}: {e}")
        
        print(f"\nManual fixes complete. Fixed {self.fixed_files} files.")

if __name__ == "__main__":
    fixer = ManualYAMLFix("/home/sgallego/Downloads/GIT/updates-and-patching")
    fixer.run()
