---
# Content View Promotion Tasks

- name: "Get latest content view versions for promotion"
  uri:
    url: "https://{{ satellite_server_url }}/katello/api/content_views/{{ content_view_id }}/content_view_versions"
    method: GET
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
  vars:
    content_view_id: "{{ content_view_mapping[item.name] }}"
  loop: "{{ content_views }}"
  register: cv_versions_for_promotion
  tags:
    - content-view-promote

- name: "Promote content views to all lifecycle environments"
  uri:
    url: "https://{{ satellite_server_url }}/katello/api/content_view_versions/{{ latest_version_id }}/promote"
    method: POST
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
    body_format: json
    body:
      environment_ids: "{{ target_environment_ids }}"
      description: "{{ content_view_promotion.promote_description_template }}"
      force: "{{ content_view_promotion.force_promote | default(false) }}"
    status_code: [200, 201, 422]
  vars:
    latest_version_id: >-
      {{
        (cv_item.json.results | first).id if cv_item.json.results | length > 0 else null
      }}
    target_environment_ids: >-
      {{
        lifecycle_environment_ids |
        difference([
          all_lifecycle_envs.json.results |
          selectattr('library', 'equalto', true) |
          map(attribute='id') |
          first
        ])
      }}
  loop: "{{ cv_versions_for_promotion.results }}"
  loop_control:
    loop_var: cv_item
  when:
    - content_view_promotion.promote_to_all_environments | bool
    - latest_version_id is not none
    - not dry_run | bool
  register: promotion_tasks
  async: "{{ promotion_settings.timeout }}"
  poll: 0
  tags:
    - content-view-promote

- name: "Promote content views to specific environments"
  uri:
    url: "https://{{ satellite_server_url }}/katello/api/content_view_versions/{{ latest_version_id }}/promote"
    method: POST
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
    body_format: json
    body:
      environment_ids: ["{{ target_env_id }}"]
      description: "{{ content_view_promotion.promote_description_template }}"
      force: "{{ content_view_promotion.force_promote | default(false) }}"
    status_code: [200, 201, 422]
  vars:
    content_view_id: "{{ content_view_mapping[promotion_item.content_view] }}"
    latest_version_id: >-
      {{
        cv_versions_for_promotion.results |
        selectattr('item.name', 'equalto', promotion_item.content_view) |
        map(attribute='json.results') |
        first |
        first |
        attribute('id')
      }}
    target_env_id: "{{ lifecycle_environment_mapping[promotion_item.environment] }}"
  loop: "{{ content_view_specific_promotions | default([]) }}"
  loop_control:
    loop_var: promotion_item
  when:
    - not content_view_promotion.promote_to_all_environments | bool
    - not dry_run | bool
  register: specific_promotion_tasks
  tags:
    - content-view-promote

- name: "Wait for promotion tasks to complete"
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: promotion_jobs
  until: promotion_jobs.finished
  retries: "{{ (promotion_settings.timeout / 60) | int }}"
  delay: 60
  loop: "{{ promotion_tasks.results }}"
  when:
    - promotion_tasks is defined
    - promotion_tasks.results is defined
    - item.ansible_job_id is defined
    - promotion_settings.async_promote | bool
  tags:
    - content-view-promote

- name: "Validate promotions completed successfully"
  uri:
    url: "https://{{ satellite_server_url }}/katello/api/content_view_versions/{{ version_id }}"
    method: GET
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
  vars:
    version_id: "{{ item.json.id if item.json is defined else item.id }}"
  loop: "{{ cv_versions_for_promotion.results | map(attribute='json.results') | list | flatten | selectattr('id', 'defined') | list }}"
  register: promotion_validation
  when:
    - promotion_settings.validate_promotion | bool
    - cv_versions_for_promotion is defined
  tags:
    - content-view-promote

- name: "Display promotion results"
  debug:
    msg:
      - "Content View Version: {{ item.json.content_view.name }} v{{ item.json.version }}"
      - "Environments: {{ item.json.environments | map(attribute='name') | list | join(', ') }}"
      - "Packages: {{ item.json.package_count | default(0) }}"
      - "Errata: {{ item.json.errata_counts.total | default(0) }}"
  loop: "{{ promotion_validation.results }}"
  when:
    - promotion_validation is defined
    - debug_mode | bool
  tags:
    - content-view-promote
