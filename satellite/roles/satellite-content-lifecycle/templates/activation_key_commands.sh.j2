#!/bin/bash
# Red Hat Satellite Activation Key Registration Commands
# Generated by Ansible Content Lifecycle Management Role
# Server: {{ satellite_server_url }}
# Organization: {{ satellite_organization }}
# Generated: {{ ansible_date_time.iso8601 }}

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'
BOLD='\033[1m'

echo -e "${BOLD}Red Hat Satellite Activation Key Registration${NC}"
echo -e "Server: {{ satellite_server_url }}"
echo -e "Organization: {{ satellite_organization }}"
echo ""

# Function to register with activation key
register_with_activation_key() {
  local ak_name="$1"
  local description="$2"

  echo -e "${BLUE}[INFO]${NC} Registering with activation key: ${ak_name}"
  echo -e "${BLUE}[INFO]${NC} Description: ${description}"

  # Clean any existing registration
  subscription-manager clean || true

  # Register with activation key
  subscription-manager register \
    --org="{{ satellite_organization }}" \
    --activationkey="${ak_name}" \
    --serverurl="https://{{ satellite_server_url }}" \
    --baseurl="https://{{ satellite_server_url }}/pulp/repos"

  # Enable Red Hat Insights (if available)
  if command -v insights-client >/dev/null 2>&1; then
    insights-client --register || true
    echo -e "${GREEN}[SUCCESS]${NC} Red Hat Insights enabled"
  fi

  # Enable Red Hat Connector (if available)
  if command -v rhc >/dev/null 2>&1; then
    rhc connect || true
    echo -e "${GREEN}[SUCCESS]${NC} Red Hat Connector enabled"
  fi

  echo -e "${GREEN}[SUCCESS]${NC} Registration completed with ${ak_name}"
}

# Available Activation Keys
echo -e "${YELLOW}Available Activation Keys:${NC}"
{% for ak in activation_keys %}
echo -e "{{ loop.index }}. ${BOLD}{{ ak.name }}${NC} - {{ ak.description }}"
echo -e "  Environment: {{ ak.lifecycle_environment }}"
echo -e "  Content View: {{ ak.content_view }}"
echo -e "  Max Hosts: {{ ak.max_hosts if not ak.unlimited_hosts else 'Unlimited' }}"
echo ""
{% endfor %}

# Registration functions
{% for ak in activation_keys %}
{{ ak.name | lower | replace('-', '_') | replace(' ', '_') }}_register() {
  register_with_activation_key "{{ ak.name }}" "{{ ak.description }}"
}
{% endfor %}

# Interactive registration
interactive_register() {
  echo -e "${BOLD}Select an activation key:${NC}"
  {% for ak in activation_keys %}
  echo -e "{{ loop.index }}. {{ ak.name }} ({{ ak.lifecycle_environment }})"
  {% endfor %}
  echo -e "{{ activation_keys | length + 1 }}. Exit"

  read -p "Enter your choice [1-{{ activation_keys | length + 1 }}]: " choice

  case $choice in
  {% for ak in activation_keys %}
    {{ loop.index }})
      {{ ak.name | lower | replace('-', '_') | replace(' ', '_') }}_register
      ;;
  {% endfor %}
    {{ activation_keys | length + 1 }})
      echo -e "${YELLOW}[INFO]${NC} Exiting..."
      exit 0
      ;;
    *)
      echo -e "${RED}[ERROR]${NC} Invalid choice"
      exit 1
      ;;
  esac
}

# Main execution
main() {
  if [[ $# -eq 0 ]]; then
    interactive_register
  else
    case "$1" in
    {% for ak in activation_keys %}
      "{{ ak.name | lower }}" | "{{ ak.name }}")
        {{ ak.name | lower | replace('-', '_') | replace(' ', '_') }}_register
        ;;
    {% endfor %}
      "--help" | "-h")
        echo "Usage: $0 [activation_key_name]"
        echo ""
        echo "Available activation keys:"
        {% for ak in activation_keys %}
        echo "  {{ ak.name }}"
        {% endfor %}
        ;;
      *)
        echo -e "${RED}[ERROR]${NC} Unknown activation key: $1"
        echo "Use --help to see available keys"
        exit 1
        ;;
    esac
  fi
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
  echo -e "${RED}[ERROR]${NC} This script must be run as root"
  exit 1
fi

# Check if subscription-manager is available
if ! command -v subscription-manager >/dev/null 2>&1; then
  echo -e "${RED}[ERROR]${NC} subscription-manager not found"
  echo "Please install subscription-manager package"
  exit 1
fi

main "$@"
