---
# Schedule Maintenance Playbook
# Schedules maintenance tasks in AAP/AWX
# Used by: EDA Rulebooks for scheduling LVM extensions and system maintenance

- name: Schedule Maintenance
  hosts: localhost
  gather_facts: false
  
  vars:
    target_host: "{{ target_host | default('unknown') }}"
    mount_point: "{{ mount_point | default('/') }}"
    operation: "{{ operation | default('maintenance') }}"
    window: "{{ window | default('next_available') }}"
    job_template: "{{ job_template | default('System Maintenance') }}"
  
  tasks:
    - name: Determine maintenance window time
      set_fact:
        maintenance_start: >-
          {%- if window == 'next_available' -%}
          {{ '%Y%m%dT220000Z' | strftime(ansible_date_time.epoch | int + 86400) }}
          {%- elif window == 'tonight' -%}
          {{ '%Y%m%dT020000Z' | strftime(ansible_date_time.epoch | int + 3600) }}
          {%- elif window == 'weekend' -%}
          {{ '%Y%m%dT020000Z' | strftime(ansible_date_time.epoch | int + 172800) }}
          {%- else -%}
          {{ '%Y%m%dT220000Z' | strftime(ansible_date_time.epoch | int + 86400) }}
          {%- endif -%}
    
    - name: Schedule in AAP/AWX using awx.awx collection
      awx.awx.schedule:
        name: "{{ operation | title }} - {{ target_host }} - {{ mount_point }}"
        state: present
        unified_job_template: "{{ job_template }}"
        rrule: "DTSTART:{{ maintenance_start }} RRULE:FREQ=DAILY;INTERVAL=1;COUNT=1"
        extra_data:
          target_hosts: "{{ target_host }}"
          mount_point: "{{ mount_point }}"
          operation: "{{ operation }}"
        tower_host: "{{ aap_host | default(lookup('env', 'TOWER_HOST')) }}"
        tower_username: "{{ aap_username | default(lookup('env', 'TOWER_USERNAME')) }}"
        tower_password: "{{ aap_password | default(lookup('env', 'TOWER_PASSWORD')) }}"
        validate_certs: "{{ aap_validate_certs | default(true) }}"
      register: schedule_result
      when:
        - aap_host is defined or lookup('env', 'TOWER_HOST') | length > 0
      ignore_errors: true
    
    - name: Schedule using ansible.controller collection (alternative)
      ansible.controller.schedule:
        name: "{{ operation | title }} - {{ target_host }} - {{ mount_point }}"
        state: present
        unified_job_template: "{{ job_template }}"
        rrule: "DTSTART:{{ maintenance_start }} RRULE:FREQ=DAILY;INTERVAL=1;COUNT=1"
        extra_data:
          target_hosts: "{{ target_host }}"
          mount_point: "{{ mount_point }}"
          operation: "{{ operation }}"
        controller_host: "{{ aap_host | default(lookup('env', 'CONTROLLER_HOST')) }}"
        controller_username: "{{ aap_username | default(lookup('env', 'CONTROLLER_USERNAME')) }}"
        controller_password: "{{ aap_password | default(lookup('env', 'CONTROLLER_PASSWORD')) }}"
        validate_certs: "{{ aap_validate_certs | default(true) }}"
      register: controller_schedule_result
      when:
        - schedule_result is skipped or schedule_result is failed
        - aap_host is defined or lookup('env', 'CONTROLLER_HOST') | length > 0
      ignore_errors: true
    
    - name: Log maintenance scheduling
      debug:
        msg: |
          Maintenance Scheduled
          =====================
          Operation: {{ operation }}
          Host: {{ target_host }}
          Mount Point: {{ mount_point }}
          Window: {{ window }}
          Scheduled Start: {{ maintenance_start }}
          Job Template: {{ job_template }}
          {% if schedule_result is defined and schedule_result.id is defined %}
          Schedule ID: {{ schedule_result.id }}
          {% endif %}
          {% if controller_schedule_result is defined and controller_schedule_result.id is defined %}
          Schedule ID: {{ controller_schedule_result.id }}
          {% endif %}
    
    - name: Create maintenance notification
      debug:
        msg: "Maintenance for {{ operation }} on {{ target_host }} scheduled for {{ window }}"
