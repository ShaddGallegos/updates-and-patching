---
- name: Security Updates for RHEL Systems
  hosts: all
  gather_facts: true
  become: true
  vars:
    # Security update configuration
    security_only: true
    auto_reboot: false
    reboot_timeout: 600
    
  tasks:
    - name: Ensure we're running on supported RHEL systems
      ansible.builtin.fail:
        msg: "This playbook only supports RHEL family distributions"
      when: ansible_facts['os_family'] != "RedHat"
      
    - name: Check for available security updates (dry run)
      ansible.builtin.dnf:
        name: '*'
        security: true
        state: latest
      check_mode: true
      register: security_updates_check
      
    - name: Display available security updates
      ansible.builtin.debug:
        msg:
          - "Security updates available: {{ security_updates_check.changes.updated | default([]) | length }}"
          - "Updates: {{ security_updates_check.changes.updated | default([]) }}"
      when: security_updates_check.changes is defined
      
    - name: Apply security updates
      ansible.builtin.dnf:
        name: '*'
        security: true
        state: latest
        update_only: true
      register: security_updates_applied
      notify: reboot if needed
      
    - name: Check if reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      
    - name: Set reboot required fact
      ansible.builtin.set_fact:
        system_reboot_required: "{{ reboot_required_file.stat.exists or (security_updates_applied.changes.updated | default([]) | select('match', '^kernel') | list | length > 0) }}"
        
    - name: Display reboot status
      ansible.builtin.debug:
        msg: "Reboot required: {{ system_reboot_required }}"
        
    - name: Reboot system if needed and requested
      ansible.builtin.reboot:
        reboot_timeout: "{{ reboot_timeout }}"
        post_reboot_delay: 30
        test_command: uptime
      when: 
        - system_reboot_required | bool
        - auto_reboot | bool
        
  handlers:
    - name: reboot if needed
      ansible.builtin.reboot:
        reboot_timeout: "{{ reboot_timeout }}"
        post_reboot_delay: 30
        test_command: uptime
      when: 
        - auto_reboot | bool
        - system_reboot_required | default(false) | bool
