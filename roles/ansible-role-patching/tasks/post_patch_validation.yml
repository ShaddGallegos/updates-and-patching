---
# Post-patching validation tasks

- name: Gather updated system facts
  ansible.builtin.setup:
    gather_subset:
      - 'system'
      - 'hardware'
  tags: [validation, facts]

- name: Verify system is responsive after patching
  ansible.builtin.wait_for_connection:
    timeout: 300
    delay: 10
  tags: [validation, connectivity]

- name: Check system load after patching
  ansible.builtin.shell: |
    uptime
    free -m
    df -h
  register: patch_system_status
  changed_when: false
  tags: [validation, system]

- name: Verify critical services are running
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
  loop: "{{ patch_critical_services | default(['sshd', 'systemd-logind']) }}"
  register: patch_service_validation
  tags: [validation, services]

- name: Check for package manager consistency
  ansible.builtin.shell: |
    case "{{ ansible_facts['pkg_mgr'] }}" in
      "yum"|"dnf")
        {{ ansible_facts['pkg_mgr'] }}
        ;;
      "apt")
        apt-get check
        ;;
      "zypper")
        zypper verify
        ;;
      "pacman")
        pacman -Dk
        ;;
      *)
        echo "Package manager validation not implemented for {{ ansible_facts['pkg_mgr'] }}"
        ;;
    esac
  register: patch_pkg_validation
  changed_when: false
  failed_when: false
  tags: [validation, packages]

- name: Verify no broken packages
  ansible.builtin.shell: |
    case "{{ ansible_facts['pkg_mgr'] }}" in
      "yum"|"dnf")
        {{ ansible_facts['pkg_mgr'] }} check-update >/dev/null 2>&1 && echo "OK" || echo "Issues detected"
        ;;
      "apt")
        if dpkg -l | grep -v "^ii" | grep -q "^[a-z]"; then
          echo "Broken packages detected"
        else
          echo "OK"
        fi
        ;;
      "zypper")
        zypper verify >/dev/null 2>&1 && echo "OK" || echo "Issues detected"
        ;;
      "pacman")
        if pacman -Qk 2>&1 | grep -q "warning\|error"; then
          echo "Issues detected"
        else
          echo "OK"
        fi
        ;;
      *)
        echo "Unknown package manager"
        ;;
    esac
  register: patch_broken_packages
  changed_when: false
  tags: [validation, integrity]

- name: Report package integrity issues
  ansible.builtin.debug:
  msg:
  - "Package integrity check result: {{ patch_broken_packages.stdout }}"
  - "{% if patch_broken_packages.stdout != 'OK' %}WARNING: Package issues detected, manual review may be required{% endif %}"
  when: patch_broken_packages.stdout != "OK"
  tags: [validation, integrity]

- name: Check if reboot is needed (post-patch)
  ansible.builtin.shell: |
    case "{{ ansible_facts['os_family'] }}" in
      "RedHat")
        if command -v needs-restarting >/dev/null 2>&1; then
          needs-restarting -r >/dev/null && echo "reboot_needed" || echo "no_reboot_needed"
        elif [ -f /var/run/reboot-required ]; then
          echo "reboot_needed"
        else
          echo "no_reboot_needed"
        fi
        ;;
      "Debian")
        if [ -f /var/run/reboot-required ]; then
          echo "reboot_needed"
        else
          echo "no_reboot_needed"
        fi
        ;;
      "Suse")
        if zypper ps -s | grep -q "reboot"; then
          echo "reboot_needed"
        else
          echo "no_reboot_needed"
        fi
        ;;
      *)
        echo "unknown_check"
        ;;
    esac
  register: patch_reboot_check
  changed_when: false
  failed_when: false
  tags: [validation, reboot]

- name: Update reboot requirement based on system check
  ansible.builtin.set_fact:
    patch_reboot_actually_required: "{{ patch_reboot_required or (patch_reboot_check.stdout == 'reboot_needed' if patch_reboot_check is defined else false) }}"

- name: Display post-patch validation summary
  ansible.builtin.debug:
  msg:
  - "=== Post-Patch Validation Summary ==="
  - "System Status: {{ 'Responsive' if patch_service_validation is succeeded else 'Issues Detected' }}"
  - "Package Integrity: {{ patch_broken_packages.stdout }}"
  - "Critical Services: {{ 'Running' if patch_service_validation is succeeded else 'Check Required' }}"
  - "Kernel Updated: {{ patch_kernel_was_updated }}"
  - "Reboot Required: {{ patch_reboot_actually_required }}"
  - "Total Patch Duration: {{ patch_total_duration }}s"
  tags: [validation, summary]

- name: Set validation completion flag
  ansible.builtin.set_fact:
  patch_validation_completed: true
  patch_validation_timestamp: "{{ ansible_date_time.iso8601 }}"
  patch_validation_status: "{{ 'PASSED' if patch_broken_packages.stdout == 'OK' else 'ISSUES_DETECTED' }}"
