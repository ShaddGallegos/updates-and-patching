# tasks/perform-patch-environment.yml
# Comprehensive Linux OS patching with environment variables
---

- name: Set environment variables for package managers
  ansible.builtin.set_fact:
    patch_environment: "{{ patch_env | default({}) }}"

- name: RedHat family patching with environment
  block:
    - name: Install security updates only (YUM) with environment
      ansible.builtin.shell: >
        yum update -y --security {% if patch_exclude | length > 0 %}--exclude={{ patch_exclude | join(',') }}{% endif %}
      environment: "{{ patch_environment }}"
      when:
        - patch_security_only
        - ansible_facts['pkg_mgr'] == 'yum'
      register: patch_security_result
      timeout: "{{ patch_install_timeout }}"

    - name: Install security updates only (DNF) with environment
      ansible.builtin.shell: >
        dnf update -y --security {% if patch_exclude | length > 0 %}--exclude={{ patch_exclude | join(',') }}{% endif %}
      environment: "{{ patch_environment }}"
      when:
        - patch_security_only
        - ansible_facts['pkg_mgr'] == 'dnf'
      register: patch_security_result
      timeout: "{{ patch_install_timeout }}"

- name: Full system update (YUM/DNF) with environment
  ansible.builtin.package:
    name: '*'
    state: latest
    exclude: "{{ patch_exclude | default(omit) }}"
    environment: "{{ patch_environment }}"
  when:
    - not patch_security_only
    - ansible_facts['os_family'] == 'RedHat'
  register: patch_yum_result
  timeout: "{{ patch_install_timeout }}"
  retries: "{{ patch_retries }}"
  delay: "{{ patch_retry_delay }}"
  become: true
  tags: [patch, redhat, environment]

- name: Debian family patching with environment
  block:
    - name: Update APT cache with environment
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: "{{ patch_cache_valid_time }}"
        environment: "{{ patch_environment }}"

    - name: Install security updates only (APT) with environment
      ansible.builtin.shell: |
        unattended-upgrade -v
      environment: "{{ patch_environment }}"
      when: patch_security_only
      register: patch_apt_security_result
      timeout: "{{ patch_install_timeout }}"

- name: Full system upgrade (APT) with environment
  ansible.builtin.apt:
    upgrade: "{{ 'dist' if patch_apt_dist_upgrade else 'yes' }}"
    update_cache: false
    cache_valid_time: "{{ patch_cache_valid_time }}"
    autoremove: true
    autoclean: true
    environment: "{{ patch_environment }}"
  when:
    - not patch_security_only
    - ansible_facts['os_family'] == 'Debian'
  register: patch_apt_result
  timeout: "{{ patch_install_timeout }}"
  retries: "{{ patch_retries }}"
  delay: "{{ patch_retry_delay }}"
  become: true
  tags: [patch, debian, environment]

- name: SUSE family patching with environment
  block:
    - name: Update Zypper repositories with environment
      ansible.builtin.zypper:
        update_cache: true
        environment: "{{ patch_environment }}"

    - name: Install security patches only (Zypper) with environment
      ansible.builtin.zypper:
        name: '*'
        state: latest
        type: patch
        category: security
        environment: "{{ patch_environment }}"
      when: patch_security_only
      register: patch_zypper_security_result
      timeout: "{{ patch_install_timeout }}"

    - name: Full system update (Zypper) with environment
      ansible.builtin.zypper:
        name: '*'
        state: latest
        type: "{{ 'patch' if patch_zypper_no_recommends else 'package' }}"
        disable_recommends: "{{ patch_zypper_no_recommends }}"
        environment: "{{ patch_environment }}"
      when:
        - not patch_security_only
        - ansible_facts['os_family'] == 'Suse'
      register: patch_zypper_result
      timeout: "{{ patch_install_timeout }}"
      retries: "{{ patch_retries }}"
      delay: "{{ patch_retry_delay }}"
      become: true
      tags: [patch, suse, environment]

- name: Arch Linux patching with environment
  block:
    - name: Clean Pacman cache with environment
  ansible.builtin.command: "yes | pacman -Scc"
  environment: "{{ patch_environment }}"
  when: patch_clean_cache

- name: Update Pacman database with environment
  ansible.builtin.pacman:
  update_cache: true
  environment: "{{ patch_environment }}"

- name: Full system upgrade (Pacman) with environment
  ansible.builtin.pacman:
    upgrade: true
    update_cache: false
    environment: "{{ patch_environment }}"
  register: patch_pacman_result
  timeout: "{{ patch_install_timeout }}"
  retries: "{{ patch_retries }}"
  delay: "{{ patch_retry_delay }}"
  when: ansible_facts['pkg_mgr'] == 'pacman'
  become: true
  tags: [patch, arch, environment]

- name: Alpine Linux patching with environment
  block:
    - name: Update APK cache with environment
      ansible.builtin.apk:
        update_cache: true
        environment: "{{ patch_environment }}"

    - name: Upgrade all packages (APK) with environment
      ansible.builtin.apk:
        upgrade: true
        available: true
        environment: "{{ patch_environment }}"
      register: patch_apk_result
      timeout: "{{ patch_install_timeout }}"
      when: ansible_facts['pkg_mgr'] == 'apk'
      become: true
      tags: [patch, alpine, environment]
- name: Gentoo Linux patching with environment
  block:
    - name: Sync Portage tree with environment
      ansible.builtin.shell: "emerge --sync"
      environment: "{{ patch_environment }}"

    - name: Update world (Portage) with environment
      ansible.builtin.shell: "emerge -uDN @world"
      environment: "{{ patch_environment }}"
      register: patch_portage_result
      timeout: "{{ patch_install_timeout }}"
      when: ansible_facts['pkg_mgr'] == 'portage'
      become: true
      tags: [patch, gentoo, environment]

- name: Check if kernel was updated
  ansible.builtin.shell: |
    case "{{ ansible_facts['os_family'] }}" in
      "RedHat")
        {% if ansible_facts['pkg_mgr'] == 'yum' %}
        yum history list kernel | head -5 | grep -q "$(date +%Y-%m-%d)" && echo "kernel_updated" || echo "no_kernel_update"
        {% else %}
        dnf history list kernel | head -5 | grep -q "$(date +%Y-%m-%d)" && echo "kernel_updated" || echo "no_kernel_update"
        {% endif %}
        ;;
      "Debian")
        if grep -q "$(date +%Y-%m-%d)" /var/log/apt/history.log && grep -q "linux-image" /var/log/apt/history.log; then
          echo "kernel_updated"
        else
          echo "no_kernel_update"
        fi
        ;;
      "Suse")
        zypper search -i -t package kernel-default | grep -q "$(date +%Y-%m-%d)" && echo "kernel_updated" || echo "no_kernel_update"
        ;;
      *)
        echo "unknown_os"
        ;;
    esac
  register: patch_kernel_check
  changed_when: false
  when: patch_kernel_update
  tags: [patch, kernel]
  patch_completion_timestamp: "{{ ansible_date_time.iso8601 }}"

- name: Reboot system if required
  ansible.builtin.reboot:
  reboot_timeout: "{{ patch_reboot_timeout }}"
  pre_reboot_delay: "{{ patch_reboot_delay }}"
  msg: "Rebooting after system patching with environment variables"
  when: patch_reboot_required
  tags: [patch, reboot]

