# tasks/perform-patch.yml
# Comprehensive Linux OS patching tasks
---

- name: Check for available updates (dry run)
  block:
    - name: Check YUM/DNF updates (RedHat)
      ansible.builtin.shell: "{{ ansible_facts['pkg_mgr'] }} check-update"
      register: patch_yum_check
      when: ansible_facts['os_family'] == 'RedHat'
      changed_when: false
      failed_when: false

    - name: Check APT updates (Debian/Ubuntu)
      ansible.builtin.shell: "apt list --upgradable"
      register: patch_apt_check  
      when: ansible_facts['os_family'] == 'Debian'
      changed_when: false
      failed_when: false

    - name: Check Zypper updates (SUSE)
      ansible.builtin.shell: "zypper list-updates"
      register: patch_zypper_check
      when: ansible_facts['os_family'] == 'Suse'
      changed_when: false
      failed_when: false

    - name: Check Pacman updates (Arch)
      ansible.builtin.shell: "pacman -Qu"
      register: patch_pacman_check
      when: ansible_facts['pkg_mgr'] == 'pacman'
      changed_when: false
      failed_when: false

  tags: [patch, check]

- name: Display available updates
  ansible.builtin.debug:
    msg:
      - "Available updates for {{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }}:"
      - "{{ patch_available_updates.stdout_lines[:20] | default(['No updates available']) }}"
  vars:
    patch_available_updates: >-
      {{ patch_yum_check if ansible_facts['os_family'] == 'RedHat'
         else patch_apt_check if ansible_facts['os_family'] == 'Debian' 
         else patch_zypper_check if ansible_facts['os_family'] == 'Suse'
         else patch_pacman_check if ansible_facts['pkg_mgr'] == 'pacman'
         else {'stdout_lines': ['Unknown package manager']} }}
  tags: [patch, info]

- name: Exit if dry run mode
  ansible.builtin.meta: end_play
  when: patch_dry_run
  tags: [patch, dry-run]

# RedHat family (RHEL, CentOS, Rocky, AlmaLinux, Fedora)
- name: YUM/DNF patching (RedHat family)
  block:
    - name: Install security updates only (YUM/DNF)
      ansible.builtin.shell: |
        {% if ansible_facts['pkg_mgr'] == 'yum' %}
        yum update -y --security {% if patch_exclude | length > 0 %}--exclude={{ patch_exclude | join(',') }}{% endif %}
        {% else %}
        dnf update -y --security {% if patch_exclude | length > 0 %}--exclude={{ patch_exclude | join(',') }}{% endif %}
        {% endif %}
      when: patch_security_only
      register: patch_security_result
      timeout: "{{ patch_install_timeout }}"

    - name: Full system update (YUM/DNF)
      ansible.builtin.package:
        name: '*'
        state: latest
        exclude: "{{ patch_exclude | default(omit) }}"
      when: not patch_security_only
      register: patch_full_result
      timeout: "{{ patch_install_timeout }}"
      retries: "{{ patch_retries }}"
      delay: "{{ patch_retry_delay }}"

  when: ansible_facts['os_family'] == 'RedHat'
  become: true
  tags: [patch, redhat]

# Debian family (Debian, Ubuntu)
- name: APT patching (Debian family)
  block:
    - name: Update APT cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: "{{ patch_cache_valid_time }}"

    - name: Install security updates only (APT)
      ansible.builtin.shell: |
        unattended-upgrade -v
      when: patch_security_only
      register: patch_apt_security_result
      timeout: "{{ patch_install_timeout }}"

    - name: Full system upgrade (APT)
      ansible.builtin.apt:
        upgrade: "{{ 'dist' if patch_apt_dist_upgrade else 'yes' }}"
        update_cache: false
        cache_valid_time: "{{ patch_cache_valid_time }}"
        autoremove: true
        autoclean: true
      when: not patch_security_only
      register: patch_apt_result
      timeout: "{{ patch_install_timeout }}"
      retries: "{{ patch_retries }}"
      delay: "{{ patch_retry_delay }}"

  when: ansible_facts['os_family'] == 'Debian'
  become: true
  tags: [patch, debian]

# SUSE family (openSUSE, SLES)
- name: Zypper patching (SUSE family)
  block:
    - name: Update Zypper repositories
      ansible.builtin.zypper:
        update_cache: true

    - name: Install security patches only (Zypper)
      ansible.builtin.zypper:
        name: '*'
        state: latest
        type: patch
        category: security
      when: patch_security_only
      register: patch_zypper_security_result
      timeout: "{{ patch_install_timeout }}"

    - name: Full system update (Zypper)
      ansible.builtin.zypper:
        name: '*' 
        state: latest
        type: "{{ 'patch' if patch_zypper_no_recommends else 'package' }}"
        disable_recommends: "{{ patch_zypper_no_recommends }}"
      when: not patch_security_only
      register: patch_zypper_result
      timeout: "{{ patch_install_timeout }}"
      retries: "{{ patch_retries }}"
      delay: "{{ patch_retry_delay }}"

  when: ansible_facts['os_family'] == 'Suse'
  become: true
  tags: [patch, suse]

# Arch Linux family
- name: Pacman patching (Arch family)
  block:
    - name: Clean Pacman cache
      ansible.builtin.command: "yes | pacman -Scc"
      when: patch_clean_cache

    - name: Update Pacman database
      ansible.builtin.pacman:
        update_cache: true

    - name: Full system upgrade (Pacman)
      ansible.builtin.pacman:
        upgrade: true
        update_cache: false
      register: patch_pacman_result
      timeout: "{{ patch_install_timeout }}"
      retries: "{{ patch_retries }}"
      delay: "{{ patch_retry_delay }}"

  when: ansible_facts['pkg_mgr'] == 'pacman'
  become: true
  tags: [patch, arch]

# Alpine Linux
- name: APK patching (Alpine)
  block:
    - name: Update APK cache
      ansible.builtin.apk:
        update_cache: true

    - name: Upgrade all packages (APK)
      ansible.builtin.apk:
        upgrade: true
        available: true
      register: patch_apk_result
      timeout: "{{ patch_install_timeout }}"

  when: ansible_facts['pkg_mgr'] == 'apk'
  become: true
  tags: [patch, alpine]

# Gentoo Linux
- name: Portage patching (Gentoo)
  block:
    - name: Sync Portage tree
      ansible.builtin.shell: "emerge --sync"
      
    - name: Update world (Portage)
      ansible.builtin.shell: "emerge -uDN @world"
      register: patch_portage_result
      timeout: "{{ patch_install_timeout }}"

  when: ansible_facts['pkg_mgr'] == 'portage'
  become: true
  tags: [patch, gentoo]

- name: Check if kernel was updated
  ansible.builtin.shell: |
    case "{{ ansible_facts['os_family'] }}" in
      "RedHat")
        {% if ansible_facts['pkg_mgr'] == 'yum' %}
        yum history list kernel | head -5 | grep -q "$(date +%Y-%m-%d)" && echo "kernel_updated" || echo "no_kernel_update"
        {% else %}
        dnf history list kernel | head -5 | grep -q "$(date +%Y-%m-%d)" && echo "kernel_updated" || echo "no_kernel_update"  
        {% endif %}
        ;;
      "Debian")
        if grep -q "$(date +%Y-%m-%d)" /var/log/apt/history.log && grep -q "linux-image" /var/log/apt/history.log; then
          echo "kernel_updated"
        else
          echo "no_kernel_update"
        fi
        ;;
      "Suse")
        zypper search -i -t package kernel-default | grep -q "$(date +%Y-%m-%d)" && echo "kernel_updated" || echo "no_kernel_update"
        ;;
      *)
        echo "unknown_os"
        ;;
    esac
  register: patch_kernel_check
  changed_when: false
  when: patch_kernel_update
  tags: [patch, kernel]

- name: Set kernel update flag
  ansible.builtin.set_fact:
    patch_kernel_was_updated: "{{ patch_kernel_check.stdout == 'kernel_updated' if patch_kernel_check is defined else false }}"
    patch_reboot_required: "{{ (patch_kernel_check.stdout == 'kernel_updated' and patch_reboot_if_kernel) if patch_kernel_check is defined else patch_reboot }}"

- name: Aggregate patch results
  ansible.builtin.set_fact:
    patch_update_result: >-
      {{ patch_full_result if patch_full_result is defined
         else patch_security_result if patch_security_result is defined  
         else patch_apt_result if patch_apt_result is defined
         else patch_zypper_result if patch_zypper_result is defined
         else patch_pacman_result if patch_pacman_result is defined
         else patch_apk_result if patch_apk_result is defined
         else patch_portage_result if patch_portage_result is defined
         else {'changed': false, 'msg': 'No updates performed'} }}
    patch_updates_applied: "{{ patch_update_result.changed | default(false) }}"
    patch_completion_timestamp: "{{ ansible_date_time.iso8601 }}"

- name: Reboot system if required
  ansible.builtin.reboot:
    reboot_timeout: "{{ patch_reboot_timeout }}"
    pre_reboot_delay: "{{ patch_reboot_delay }}"
    msg: "Rebooting after system patching (kernel updated: {{ patch_kernel_was_updated }})"
  when: patch_reboot_required
  tags: [patch, reboot]
...
