---
# Content View Management Tasks
- name: "Get existing content views"
  uri:
    url: "https://{{ satellite_server_url }}/katello/api/organizations/{{ organization_id }}/content_views"
    method: GET
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
  register: existing_content_views
  tags:
    - content-views

- name: "Create content views"
  uri:
    url: "https://{{ satellite_server_url }}/katello/api/organizations/{{ organization_id }}/content_views"
    method: POST
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
    body_format: json
    body:
      name: "{{ item.name }}"
      label: "{{ item.label }}"
      description: "{{ item.description }}"
      composite: "{{ item.composite | default(false) }}"
      auto_publish: "{{ item.auto_publish | default(false) }}"
      solve_dependencies: "{{ item.solve_dependencies | default(true) }}"
    status_code: [200, 201, 422]
  loop: "{{ content_views }}"
  when: 
    - item.name not in (existing_content_views.json.results | map(attribute='name') | list)
    - not item.composite | default(false)
    - not dry_run | bool
  register: content_view_creation
  tags:
    - content-views

- name: "Get updated content view list"
  uri:
    url: "https://{{ satellite_server_url }}/katello/api/organizations/{{ organization_id }}/content_views"
    method: GET
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
  register: all_content_views
  tags:
    - content-views

- name: "Add repositories to content views"
  uri:
    url: "https://{{ satellite_server_url }}/katello/api/content_views/{{ content_view_id }}/repositories"
    method: PUT
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
    body_format: json
    body:
      repository_ids: "{{ repository_ids_for_cv }}"
    status_code: [200, 422]
  vars:
    content_view_id: >-
      {{
        all_content_views.json.results |
        selectattr('name', 'equalto', item.name) |
        map(attribute='id') |
        first
      }}
    repository_ids_for_cv: >-
      {{
        existing_repositories.json.results |
        selectattr('name', 'in', item.repositories) |
        map(attribute='id') |
        list
      }}
  loop: "{{ content_views }}"
  when: 
    - item.repositories is defined
    - item.repositories | length > 0
    - not item.composite | default(false)
    - not dry_run | bool
  register: cv_repository_assignment
  tags:
    - content-views

- name: "Create content view filters"
  uri:
    url: "https://{{ satellite_server_url }}/katello/api/content_views/{{ content_view_id }}/filters"
    method: POST
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
    body_format: json
    body:
      name: "{{ filter_item.name }}"
      type: "{{ filter_item.type }}"
      inclusion: "{{ filter_item.inclusion | default(false) }}"
    status_code: [200, 201, 422]
  vars:
    content_view_id: >-
      {{
        all_content_views.json.results |
        selectattr('name', 'equalto', filter_item.content_view) |
        map(attribute='id') |
        first
      }}
  loop: "{{ content_view_filters }}"
  loop_control:
    loop_var: filter_item
  when: 
    - content_view_filters is defined
    - not dry_run | bool
  register: filter_creation
  tags:
    - content-views

- name: "Add filter rules"
  uri:
    url: "https://{{ satellite_server_url }}/katello/api/content_view_filters/{{ filter_id }}/rules"
    method: POST
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
    body_format: json
    body:
      name: "{{ rule_item.name }}"
      type: "{{ rule_item.type | default('rpm') }}"
      errata_id: "{{ rule_item.errata_id | default(omit) }}"
      types: "{{ rule_item.types | default(omit) }}"
    status_code: [200, 201, 422]
  vars:
    filter_id: "{{ filter_creation.results[filter_index].json.id }}"
  loop: "{{ filter_item.rules }}"
  loop_control:
    loop_var: rule_item
    index_var: rule_index
  with_items: "{{ content_view_filters }}"
  when: 
    - content_view_filters is defined
    - filter_item.rules is defined
    - filter_creation.results[filter_index].json.id is defined
    - not dry_run | bool
  tags:
    - content-views

- name: "Display content view summary"
  debug:
    msg:
      - "Content View: {{ item.name }}"
      - "Repositories: {{ item.repositories | length if item.repositories is defined else 0 }}"
      - "Filters: {{ content_view_filters | selectattr('content_view', 'equalto', item.name) | list | length }}"
      - "Auto Publish: {{ item.auto_publish | default(false) }}"
      - "Solve Dependencies: {{ item.solve_dependencies | default(true) }}"
  loop: "{{ content_views }}"
  when: debug_mode | bool
  tags:
    - content-views

- name: "Set content view facts"
  set_fact:
    content_view_ids: >-
      {{
        all_content_views.json.results |
        selectattr('name', 'in', content_views | map(attribute='name') | list) |
        map(attribute='id') |
        list
      }}
    content_view_mapping: >-
      {{
        dict(all_content_views.json.results |
        selectattr('name', 'in', content_views | map(attribute='name') | list) |
        map(attribute=['name', 'id']) |
        list)
      }}
  tags:
    - content-views
