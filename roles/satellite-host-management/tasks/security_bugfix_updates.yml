---
# Security and Bugfix Updates Management
- name: "Create security update job for critical security patches"
  uri:
    url: "https://{{ satellite_server_url }}/api/job_invocations"
    method: POST
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
    body_format: json
    body:
      job_template_id: "{{ job_template_id }}"
      targeting_type: "static_query"
      search_query: "{{ security_host_search }}"
      inputs:
        action: "update"
        packages: "--security"
      description: "Security Updates - {{ ansible_date_time.epoch }}"
      concurrency_level: "{{ update_jobs.concurrency_level }}"
      execution_timeout_interval: "{{ update_jobs.timeout }}"
    status_code: [200, 201]
  vars:
    job_template_id: "{{ package_job_template.json.results[0].id }}"
    security_host_search: >-
      {% if target_hosts.single_node.hostname != "" %}
      name={{ target_hosts.single_node.hostname }}
      {% elif target_hosts.host_groups | length > 0 %}
      hostgroup="{{ target_hosts.host_groups[0].name }}"
      {% else %}
      organization="{{ satellite_organization }}"
      {% endif %}
  when:
    - package_operations.security_updates.enabled | bool
    - package_job_template.json.total > 0
    - not dry_run | bool
  register: security_update_job
  tags:
    - security-updates

- name: "Create bugfix update job for non-critical bug fixes"
  uri:
    url: "https://{{ satellite_server_url }}/api/job_invocations"
    method: POST
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
    body_format: json
    body:
      job_template_id: "{{ job_template_id }}"
      targeting_type: "static_query"
      search_query: "{{ bugfix_host_search }}"
      inputs:
        action: "update"
        packages: "--bugfix"
      description: "Bugfix Updates - {{ ansible_date_time.epoch }}"
      concurrency_level: "{{ update_jobs.concurrency_level }}"
      execution_timeout_interval: "{{ update_jobs.timeout }}"
    status_code: [200, 201]
  vars:
    job_template_id: "{{ package_job_template.json.results[0].id }}"
    bugfix_host_search: >-
      {% if target_hosts.single_node.hostname != "" %}
      name={{ target_hosts.single_node.hostname }}
      {% elif target_hosts.host_groups | length > 0 %}
      hostgroup="{{ target_hosts.host_groups[0].name }}"
      {% else %}
      organization="{{ satellite_organization }}"
      {% endif %}
  when:
    - package_operations.bugfix_updates.enabled | bool
    - package_job_template.json.total > 0
    - not dry_run | bool
  register: bugfix_update_job
  tags:
    - bugfix-updates

- name: "Create comprehensive system update job (all packages)"
  uri:
    url: "https://{{ satellite_server_url }}/api/job_invocations"
    method: POST
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
    body_format: json
    body:
      job_template_id: "{{ job_template_id }}"
      targeting_type: "static_query"
      search_query: "{{ all_updates_host_search }}"
      inputs:
        action: "update"
        packages: ""
      description: "Complete System Updates - {{ ansible_date_time.epoch }}"
      concurrency_level: "{{ update_jobs.concurrency_level }}"
      execution_timeout_interval: "{{ update_jobs.timeout }}"
    status_code: [200, 201]
  vars:
    job_template_id: "{{ package_job_template.json.results[0].id }}"
    all_updates_host_search: >-
      {% if target_hosts.single_node.hostname != "" %}
      name={{ target_hosts.single_node.hostname }}
      {% elif target_hosts.host_groups | length > 0 %}
      hostgroup="{{ target_hosts.host_groups[0].name }}"
      {% else %}
      organization="{{ satellite_organization }}"
      {% endif %}
  when:
    - package_operations.all_updates.enabled | bool
    - package_job_template.json.total > 0
    - not dry_run | bool
  register: all_update_job
  tags:
    - all-updates

- name: "Monitor security update job progress"
  uri:
    url: "https://{{ satellite_server_url }}/api/job_invocations/{{ security_update_job.json.id }}"
    method: GET
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
  register: security_job_status
  until: security_job_status.json.status_label != 'running'
  retries: "{{ (update_jobs.timeout / 60) | int }}"
  delay: 60
  when: 
    - security_update_job is defined
    - security_update_job.json is defined
    - not dry_run | bool
  tags:
    - security-updates

- name: "Monitor bugfix update job progress"
  uri:
    url: "https://{{ satellite_server_url }}/api/job_invocations/{{ bugfix_update_job.json.id }}"
    method: GET
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
  register: bugfix_job_status
  until: bugfix_job_status.json.status_label != 'running'
  retries: "{{ (update_jobs.timeout / 60) | int }}"
  delay: 60
  when: 
    - bugfix_update_job is defined
    - bugfix_update_job.json is defined
    - not dry_run | bool
  tags:
    - bugfix-updates

- name: "Monitor comprehensive update job progress"
  uri:
    url: "https://{{ satellite_server_url }}/api/job_invocations/{{ all_update_job.json.id }}"
    method: GET
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
  register: all_updates_job_status
  until: all_updates_job_status.json.status_label != 'running'
  retries: "{{ (update_jobs.timeout / 60) | int }}"
  delay: 60
  when: 
    - all_update_job is defined
    - all_update_job.json is defined
    - not dry_run | bool
  tags:
    - all-updates

- name: "Schedule automatic reboot if needed after updates"
  uri:
    url: "https://{{ satellite_server_url }}/api/job_invocations"
    method: POST
    user: "{{ satellite_username }}"
    password: "{{ satellite_password }}"
    force_basic_auth: yes
    validate_certs: yes
    body_format: json
    body:
      job_template_id: "{{ reboot_job_template_id }}"
      targeting_type: "static_query"
      search_query: "{{ reboot_host_search }}"
      description: "Post-update reboot - {{ ansible_date_time.epoch }}"
      start_at: "{{ ansible_date_time.epoch | int + update_jobs.reboot_delay_minutes * 60 }}"
    status_code: [200, 201]
  vars:
    reboot_job_template_id: "{{ reboot_template.json.results[0].id }}"
    reboot_host_search: >-
      {% if target_hosts.single_node.hostname != "" %}
      name={{ target_hosts.single_node.hostname }}
      {% elif target_hosts.host_groups | length > 0 %}
      hostgroup="{{ target_hosts.host_groups[0].name }}"
      {% else %}
      organization="{{ satellite_organization }}"
      {% endif %}
  when:
    - package_operations.reboot_if_required | bool
    - reboot_template.json.total > 0
    - (security_job_status.json.status_label == 'succeeded') or 
      (bugfix_job_status.json.status_label == 'succeeded') or 
      (all_updates_job_status.json.status_label == 'succeeded')
    - not dry_run | bool
  register: post_update_reboot
  tags:
    - security-updates
    - bugfix-updates
    - all-updates

- name: "Generate update operation report"
  template:
    src: update_report.html.j2
    dest: "{{ playbook_dir }}/reports/update_operations_{{ ansible_date_time.epoch }}.html"
  vars:
    report_data:
      timestamp: "{{ ansible_date_time.iso8601 }}"
      operation_type: "package_updates"
      target_organization: "{{ satellite_organization }}"
      target_location: "{{ satellite_location }}"
      update_jobs:
        cve: "{{ cve_update_job | default({}) }}"
        security: "{{ security_update_job | default({}) }}"
        bugfix: "{{ bugfix_update_job | default({}) }}"
        all: "{{ all_update_job | default({}) }}"
      job_status:
        cve: "{{ cve_job_status | default({}) }}"
        security: "{{ security_job_status | default({}) }}"
        bugfix: "{{ bugfix_job_status | default({}) }}"
        all: "{{ all_updates_job_status | default({}) }}"
      reboot_job: "{{ post_update_reboot | default({}) }}"
      host_counts:
        total: "{{ target_hosts_for_cve.json.total | default(0) }}"
        cve_updates: "{{ cve_update_job.json.targeting.bookmark_id if cve_update_job.json is defined else 0 }}"
        security_updates: "{{ security_update_job.json.targeting.bookmark_id if security_update_job.json is defined else 0 }}"
        bugfix_updates: "{{ bugfix_update_job.json.targeting.bookmark_id if bugfix_update_job.json is defined else 0 }}"
        all_updates: "{{ all_update_job.json.targeting.bookmark_id if all_update_job.json is defined else 0 }}"
  delegate_to: localhost
  tags:
    - reporting

- name: "Generate JSON update report for automation"
  template:
    src: update_report.json.j2
    dest: "{{ playbook_dir }}/reports/update_operations_{{ ansible_date_time.epoch }}.json"
  vars:
    report_data:
      timestamp: "{{ ansible_date_time.iso8601 }}"
      operation_type: "package_updates"
      organization: "{{ satellite_organization }}"
      location: "{{ satellite_location }}"
      update_operations:
        cve_updates:
          enabled: "{{ package_operations.cve_updates.enabled }}"
          target_cves: "{{ package_operations.cve_updates.target_cves }}"
          job_id: "{{ cve_update_job.json.id if cve_update_job.json is defined else null }}"
          status: "{{ cve_job_status.json.status_label if cve_job_status.json is defined else 'not_run' }}"
        security_updates:
          enabled: "{{ package_operations.security_updates.enabled }}"
          job_id: "{{ security_update_job.json.id if security_update_job.json is defined else null }}"
          status: "{{ security_job_status.json.status_label if security_job_status.json is defined else 'not_run' }}"
        bugfix_updates:
          enabled: "{{ package_operations.bugfix_updates.enabled }}"
          job_id: "{{ bugfix_update_job.json.id if bugfix_update_job.json is defined else null }}"
          status: "{{ bugfix_job_status.json.status_label if bugfix_job_status.json is defined else 'not_run' }}"
        all_updates:
          enabled: "{{ package_operations.all_updates.enabled }}"
          job_id: "{{ all_update_job.json.id if all_update_job.json is defined else null }}"
          status: "{{ all_updates_job_status.json.status_label if all_updates_job_status.json is defined else 'not_run' }}"
      reboot_operations:
        scheduled: "{{ post_update_reboot.json.id is defined }}"
        job_id: "{{ post_update_reboot.json.id if post_update_reboot.json is defined else null }}"
      summary:
        total_hosts_targeted: "{{ target_hosts_for_cve.json.total | default(0) }}"
        update_jobs_created: "{{ [cve_update_job, security_update_job, bugfix_update_job, all_update_job] | select('defined') | list | length }}"
        reboot_scheduled: "{{ post_update_reboot.json.id is defined }}"
  delegate_to: localhost
  tags:
    - reporting

- name: "Display package update summary"
  debug:
    msg:
      - "========================================="
      - "Package Update Operations Complete"
      - "========================================="
      - "Total Hosts Targeted: {{ target_hosts_for_cve.json.total | default(0) }}"
      - "CVE Updates: {{ 'Executed' if cve_update_job.json is defined else 'Skipped' }}"
      - "Security Updates: {{ 'Executed' if security_update_job.json is defined else 'Skipped' }}"
      - "Bugfix Updates: {{ 'Executed' if bugfix_update_job.json is defined else 'Skipped' }}"
      - "All Updates: {{ 'Executed' if all_update_job.json is defined else 'Skipped' }}"
      - "Reboot Scheduled: {{ 'Yes' if post_update_reboot.json.id is defined else 'No' }}"
      - "Reports Generated: {{ playbook_dir }}/reports/"
      - "========================================="
  tags:
    - summary
