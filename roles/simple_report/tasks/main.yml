---
- name: Ensure directory exists on controller node
  ansible.builtin.file:
    path: /tmp/Subs_Reporting/
    state: directory
    mode: '0755'
  delegate_to: ansible.prod.spg
  run_once: true

- name: Copy root SSH keys to controller node
  ansible.builtin.copy:
    src: /root/.ssh/id_rsa.pub
    dest: /tmp/Subs_Reporting/root_id_rsa.pub
    mode: '0600'
  delegate_to: ansible.prod.spg
  run_once: true

- name: Ensure directory exists on node01.prod.spg
  ansible.builtin.file:
    path: /tmp/Subs_Reporting/
    state: directory
    mode: '0755'
  delegate_to: node01.prod.spg
  run_once: true

- name: Copy root SSH keys to node01.prod.spg
  ansible.builtin.copy:
    src: /root/.ssh/id_rsa.pub
    dest: /tmp/Subs_Reporting/root_id_rsa.pub
    mode: '0600'
  delegate_to: node01.prod.spg
  run_once: true

- name: Collect system information from remote hosts
  ansible.builtin.set_fact:
    host_data: >-
      {{ ansible_facts['hostname'] | default('Unknown') }},
      {{ ansible_facts['distribution_major_version'] | default('Unknown') }}.{{ ansible_facts['distribution_version'] | default('Unknown') }},
      {{ ansible_facts['default_ipv4']['address'] | default('Unknown') }},
      {{ ansible_facts['rhsm']['subscriptions'][0]['name'] | default('None') }},
      {{ ansible_facts['rhsm']['subscriptions'][0]['id'] | default('None') }}

- name: Get count of installable updates on remote hosts
  ansible.builtin.shell: |
    set -o pipefail
    yum updateinfo list security | wc -l
    yum updateinfo list bugfix | wc -l
    yum updateinfo list enhancement | wc -l
    yum list updates | wc -l
  register: update_counts
  changed_when: false

- name: Format updates data
  ansible.builtin.set_fact:
    update_data: >-
      {{ update_counts.stdout_lines[0] | default('0') }},
      {{ update_counts.stdout_lines[1] | default('0') }},
      {{ update_counts.stdout_lines[2] | default('0') }},
      {{ update_counts.stdout_lines[3] | default('0') }}

- name: Collect data from all hosts
  ansible.builtin.debug:
    msg: "Collecting data from {{ inventory_hostname }}"
  run_once: true

- name: Gather all host data on control node
  ansible.builtin.copy:
    content: |
      Hostname,OS Version,IP,Subscription,Subscription ID,Security,Bug_Fix,Enhancement,ALL_RPM_Package_Updates
      {{ host_data }},{{ update_data }}
    dest: "/tmp/Subs_Reporting/Subs_Report-{{ ansible_date_time.date }}.csv"
    mode: '0644'
  delegate_to: localhost
  run_once: true
  failed_when: false

- name: Gather all host data on node01.prod.spg
  ansible.builtin.copy:
    content: |
      Hostname,OS Version,IP,Subscription,Subscription ID,Security,Bug_Fix,Enhancement,ALL_RPM_Package_Updates
      {{ host_data }},{{ update_data }}
    dest: /tmp/Subs_Reporting/Subs_Report-{{ ansible_date_time.date }}.csv
    mode: '0644'
  delegate_to: node01.prod.spg
  run_once: true

- name: Fallback - Copy report to node01 if control node copy fails
  ansible.builtin.copy:
    content: |
      Hostname,OS Version,IP,Subscription,Subscription ID,Security,Bug_Fix,Enhancement,ALL_RPM_Package_Updates
      {{ host_data }},{{ update_data }}
    dest: "/tmp/Subs_Reporting/Subs_Report-{{ ansible_date_time.date }}.csv"
    mode: '0644'
  delegate_to: node01
  when: ansible_failed_tasks is defined and
        "'Gather all host data on control node' in [task['name'] for task in ansible_failed_tasks]"
  run_once: true

- name: Inform user about report location
  ansible.builtin.debug:
    msg: >
      The subscription report has been generated and is available at
      /tmp/Subs_Reporting/Subs_Report-{{ ansible_date_time.date }}.csv
  delegate_to: localhost
  run_once: true

- name: Inform user about report location
  ansible.builtin.debug:
    msg: >
      The subscription report has been generated and is available at
      /tmp/Subs_Reporting/Subs_Report-{{ ansible_date_time.date }}.csv on node01.prod.spg
  delegate_to: node01.prod.spg
  run_once: true

- name: Gather all host data on controller node
  ansible.builtin.copy:
    content: |
      Hostname,OS Version,IP,Subscription,Subscription ID,Security,Bug_Fix,Enhancement,ALL_RPM_Package_Updates
      {{ host_data }},{{ update_data }}
    dest: /tmp/Subs_Reporting/Subs_Report-{{ ansible_date_time.date }}.csv
    mode: '0644'
  delegate_to: ansible.prod.spg
  run_once: true

- name: Inform user about report location
  ansible.builtin.debug:
    msg: >
      The subscription report has been generated and is available at
      /tmp/Subs_Reporting/Subs_Report-{{ ansible_date_time.date }}.csv on ansible.prod.spg
  delegate_to: ansible.prod.spg
  run_once: true

- name: Run Inventory Report Only
  ansible.builtin.include_role:
    name: simple_report
  when: run_inventory_report | lower == "yes"

- name: Install Updates Based on Type
  ansible.builtin.command: >
    dnf update
    {% if apply_security_updates | lower == "yes" or apply_all_updates | lower == "yes" %}--security{% endif %}
    {% if apply_bugfix_updates | lower == "yes" or apply_all_updates | lower == "yes" %}--bugfix{% endif %}
    {% if apply_enhancement_updates | lower == "yes" or apply_all_updates | lower == "yes" %}--enhancement{% endif %}
    -y
  args:
    creates: >
      {% if apply_security_updates | lower == "yes" or apply_all_updates | lower == "yes" %}/var/log/security_updates_done{% endif %}
      {% if apply_bugfix_updates | lower == "yes" or apply_all_updates | lower == "yes" %}/var/log/bugfix_updates_done{% endif %}
      {% if apply_enhancement_updates | lower == "yes" or apply_all_updates | lower == "yes" %}/var/log/enhancement_updates_done{% endif %}
      {% if apply_all_updates | lower == "yes" %}/var/log/all_updates_done{% endif %}
  when: >
    apply_security_updates | lower == "yes" or
    apply_bugfix_updates | lower == "yes" or
    apply_enhancement_updates | lower == "yes" or
    apply_all_updates | lower == "yes"

- name: Run Inventory Report
  ansible.builtin.include_role:
    name: simple_report
  when: run_inventory_report | lower == "yes"

- name: Install Security Updates
  ansible.builtin.command: dnf update --security -y
  args:
    creates: /var/log/security_updates_done
- name: Install Bug Fix Updates
  ansible.builtin.command: dnf update --bugfix -y
  args:
    creates: /var/log/bugfix_updates_done
- name: Install Enhancement Updates
  ansible.builtin.command: dnf update --enhancement -y
  args:
    creates: /var/log/enhancement_updates_done
  when: apply_enhancement_updates | lower == "yes" or apply_all_updates | lower == "yes"

- name: Install Enhancement Updates
  ansible.builtin.command: dnf update --enhancement -y
  args:
    creates: /var/log/enhancement_updates_done
  when: apply_enhancement_updates | lower == "yes" or apply_all_updates | lower == "yes"
