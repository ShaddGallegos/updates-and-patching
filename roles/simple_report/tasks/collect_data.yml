---
# System data collection tasks for all RHEL versions

- name: Gather comprehensive system facts
  ansible.builtin.setup:
    gather_subset:
      - all

- name: Collect basic system information
  ansible.builtin.set_fact:
    system_info:
      hostname: "{{ ansible_facts['hostname'] | default('Unknown') }}"
      fqdn: "{{ ansible_facts['fqdn'] | default('Unknown') }}"
      os_family: "{{ ansible_facts['os_family'] | default('Unknown') }}"
      distribution: "{{ ansible_facts['distribution'] | default('Unknown') }}"
      distribution_version: "{{ ansible_facts['distribution_version'] | default('Unknown') }}"
      distribution_major_version: "{{ ansible_facts['distribution_major_version'] | default('Unknown') }}"
      kernel_version: "{{ ansible_facts['kernel'] | default('Unknown') }}"
      architecture: "{{ ansible_facts['architecture'] | default('Unknown') }}"
      virtualization_type: "{{ ansible_facts['virtualization_type'] | default('Physical') }}"
      uptime_seconds: "{{ ansible_facts['uptime_seconds'] | default(0) }}"
      last_boot: "{{ ansible_facts['uptime_seconds'] | default(0) | int | abs | human_to_bytes }}"

- name: Collect network information
  ansible.builtin.set_fact:
    network_info:
      default_ipv4_address: "{{ ansible_facts['default_ipv4']['address'] | default('Unknown') }}"
      default_ipv4_interface: "{{ ansible_facts['default_ipv4']['interface'] | default('Unknown') }}"
      default_gateway: "{{ ansible_facts['default_ipv4']['gateway'] | default('Unknown') }}"
      dns_nameservers: "{{ ansible_facts['dns']['nameservers'] | default(['Unknown']) }}"
      interfaces: "{{ ansible_facts['interfaces'] | default([]) }}"
  when: report_include_network | bool

- name: Collect memory information
  ansible.builtin.set_fact:
    memory_info:
      total_mb: "{{ ansible_facts['memtotal_mb'] | default(0) }}"
      free_mb: "{{ ansible_facts['memfree_mb'] | default(0) }}"
      available_mb: "{{ ansible_facts['memavailable_mb'] | default(0) }}"
      used_mb: "{{ (ansible_facts['memtotal_mb'] | default(0) - ansible_facts['memfree_mb'] | default(0)) }}"
      usage_percent: "{{ ((ansible_facts['memtotal_mb'] | default(1) - ansible_facts['memfree_mb'] | default(0)) / ansible_facts['memtotal_mb'] | default(1) * 100) | round(1) }}"
      swap_total_mb: "{{ ansible_facts['swaptotal_mb'] | default(0) }}"
      swap_free_mb: "{{ ansible_facts['swapfree_mb'] | default(0) }}"

- name: Collect CPU information
  ansible.builtin.set_fact:
    cpu_info:
      processor_count: "{{ ansible_facts['processor_count'] | default(0) }}"
      processor_cores: "{{ ansible_facts['processor_cores'] | default(0) }}"
      processor_threads_per_core: "{{ ansible_facts['processor_threads_per_core'] | default(0) }}"
      processor_vcpus: "{{ ansible_facts['processor_vcpus'] | default(0) }}"
      processor_model: "{{ ansible_facts['processor'][2] | default('Unknown') if ansible_facts['processor'] is defined and ansible_facts['processor'] | length > 2 else 'Unknown' }}"

- name: Get current CPU load averages
  ansible.builtin.shell: |
    uptime | awk -F'load average:' '{ print $NF }' | sed 's/ //g'
  register: cpu_load_raw
  changed_when: false

- name: Parse CPU load averages
  ansible.builtin.set_fact:
    cpu_load:
      load_1min: "{{ cpu_load_raw.stdout.split(',')[0] | default('0') }}"
      load_5min: "{{ cpu_load_raw.stdout.split(',')[1] | default('0') }}"
      load_15min: "{{ cpu_load_raw.stdout.split(',')[2] | default('0') }}"

- name: Collect storage information
  ansible.builtin.set_fact:
    storage_info: "{{ ansible_facts['mounts'] | default([]) }}"
  when: report_include_storage | bool

- name: Get Red Hat subscription information
  ansible.builtin.shell: |
    if command -v subscription-manager >/dev/null 2>&1; then
      subscription-manager status --format=json 2>/dev/null || echo '{"status": "Unknown"}'
    else
      echo '{"status": "No subscription-manager"}'
    fi
  register: subscription_raw
  changed_when: false
  failed_when: false

- name: Parse subscription information
  ansible.builtin.set_fact:
    subscription_info: "{{ subscription_raw.stdout | from_json if subscription_raw.stdout else {'status': 'Unknown'} }}"

- name: Get installed package count
  ansible.builtin.shell: |
    {{ active_package_manager }} list installed 2>/dev/null | wc -l
  register: installed_packages_count
  changed_when: false
  when: report_include_packages | bool

- name: Get available updates using package manager
  ansible.builtin.shell: |
    set -o pipefail
    {% if active_package_manager == 'dnf' %}
    dnf updateinfo list security 2>/dev/null | grep -v '^Last metadata expiration check' | wc -l || echo "0"
    dnf updateinfo list bugfix 2>/dev/null | grep -v '^Last metadata expiration check' | wc -l || echo "0"
    dnf updateinfo list enhancement 2>/dev/null | grep -v '^Last metadata expiration check' | wc -l || echo "0"
    dnf list updates 2>/dev/null | grep -v '^Last metadata expiration check' | wc -l || echo "0"
    {% else %}
    yum updateinfo list security 2>/dev/null | wc -l || echo "0"
    yum updateinfo list bugfix 2>/dev/null | wc -l || echo "0"
    yum updateinfo list enhancement 2>/dev/null | wc -l || echo "0"
    yum list updates 2>/dev/null | wc -l || echo "0"
    {% endif %}
  register: update_counts_raw
  changed_when: false
  when: report_include_updates | bool

- name: Parse update information
  ansible.builtin.set_fact:
    update_info:
      security_updates: "{{ update_counts_raw.stdout_lines[0] | default('0') | int }}"
      bugfix_updates: "{{ update_counts_raw.stdout_lines[1] | default('0') | int }}"
      enhancement_updates: "{{ update_counts_raw.stdout_lines[2] | default('0') | int }}"
      total_updates: "{{ update_counts_raw.stdout_lines[3] | default('0') | int }}"
      package_manager: "{{ active_package_manager }}"
  when: report_include_updates | bool

- name: Get detailed security updates if requested
  ansible.builtin.shell: |
    {% if active_package_manager == 'dnf' %}
    dnf updateinfo list security --verbose 2>/dev/null | grep -v '^Last metadata expiration check' || echo "No security updates available"
    {% else %}
    yum updateinfo list security --verbose 2>/dev/null || echo "No security updates available"
    {% endif %}
  register: security_details_raw
  changed_when: false
  when:
    - report_include_security | bool
    - report_show_update_details | bool

- name: Get critical services status
  ansible.builtin.shell: |
    systemctl is-active sshd chronyd NetworkManager firewalld 2>/dev/null | paste -sd ','
  register: services_status_raw
  changed_when: false
  when: report_include_services | bool

- name: Parse services status
  ansible.builtin.set_fact:
    services_info:
      sshd: "{{ services_status_raw.stdout.split(',')[0] | default('unknown') }}"
      chronyd: "{{ services_status_raw.stdout.split(',')[1] | default('unknown') }}"
      networkmanager: "{{ services_status_raw.stdout.split(',')[2] | default('unknown') }}"
      firewalld: "{{ services_status_raw.stdout.split(',')[3] | default('unknown') }}"
  when: report_include_services | bool

- name: Create consolidated host data structure
  ansible.builtin.set_fact:
    host_report_data:
      system: "{{ system_info }}"
      network: "{{ network_info | default({}) }}"
      memory: "{{ memory_info }}"
      cpu: "{{ cpu_info }}"
      cpu_load: "{{ cpu_load }}"
      storage: "{{ storage_info | default([]) }}"
      subscription: "{{ subscription_info }}"
      packages:
        installed_count: "{{ installed_packages_count.stdout | default('0') | int }}"
        updates: "{{ update_info | default({}) }}"
        security_details: "{{ security_details_raw.stdout_lines | default([]) if report_show_update_details else [] }}"
      services: "{{ services_info | default({}) }}"
      report_timestamp: "{{ report_timestamp }}"
      collection_time: "{{ ansible_date_time.iso8601 }}"
